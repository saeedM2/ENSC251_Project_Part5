/* ENSC 251 -- Fall 2016 -- Simon Fraser University */

/* This is the Backus-Naur Form (BNF) grammar for the subset of C++ language that we are going to use for our course project. */
/* It is derived from sources including:
       http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf
*/

/* Here are some tokens that are used by the C++ subset grammar. */
/* Examples of these tokens are described in a separate file. */
/* Other tokens, such as for punctuators and operators, appear as
   BNF string literals below in the form 'xx' */
%token int_const char_const float_const id string 
%%

/* Whitespace is allowed between tokens in the below C++ subset grammar. */

/*
main_body is the main production rule for our BNF. 
*/

	main_body      	: stat_list ';'
					;

/*
stat_list can have one or more of the stat production rule where each instance must be separated with a ';' (semicolon). Note that while creating 
Abstract Syntax Tree, ';' will become the root of the tree / subtree and multiple stat rules could be the branches from that root.
Please refer to the diagram in the instructions provided to you.
*/

	stat_list 		: stat {';' stat}*
					;

/*
stat can have either declaration or assignment_exp production rule.
*/

	stat 		: declaration
				| assignment_exp
				;

/*
declaration production rule makes call to the declarator rule and then it checks if declaratory rule
result is followed by id. It is a must that your declaration have both of these entities to be
syntactically correct.
*/

	declaration : declarator id
				;
				
				
/*
declarator production rule checks for the type_spec. If the type spec is followed by ‘*’, then add
the type_spec object as a child to punctuator object representing ‘*’ and return pointer to ‘*’.
Otherwise, only return pointer to the type_spec object.
*/


	declarator 	: type_spec '*'
				| type_spec
				;
	
	type_spec 	: char | int | float
				;
				
				
/*
assignment_exp can be represented by "id assignment_operator assignment_exp" - only in this order.
If the first production rule is not satisfied, then we check for ternary expression
*/

	assignment_exp  : id assignment_operator assignment_exp
					| ternary_exp
					;
					
	assignment_operator : '=' | '/=' | '%=' | '+=' | '-=' | '<<='
						| '>>=' | '&=' | '^=' | '|='
						;

/*
The subtree created for this production would have ‘?’ as the root of the subtree – id, assignment_exp, and
another ternary_exp would become its children.
If first production rule is not satisfied (id '?' assignment_exp ':' ternary_exp), then it would check for
shift_expression if ‘?’ has not been encountered yet, else it should give syntax error.
*/
 /* **** this eventually needs to be fixed *** */
	ternary_exp : id '?' assignment_exp ':' ternary_exp
				| shift_expression
				;

/*
shift_expression can also be represented as “additive_exp {shift_operator additive_exp}*”
where * means zero or more instances of {shift_operator additive_exp}
*/

	shift_expression : additive_exp {shift_operator additive_exp}*
					 ;
					 
	shift_operator   : '<<' | '>>'
					 ;


/*
additive_exp can also be represented as “div_exp {additive_operator div_exp}*”
where * means zero or more instances of { additive_operator div_exp }
*/

	additive_exp 	: div_exp {additive_operator div_exp}*
					;
					
	additive_operator : '+' | '-'
					  ;

/*
div_exp can also be represented as “unary_exp {div_operator unary_exp}*”
where * means zero or more instances of { div_operator unary_exp }
*/

	div_exp : unary_exp {div_operator unary_exp}*
			;
			
	div_operator : '/' | '%'
				 ;
				 
/*
unary_exp production rule first checks for unary_operator, if the token is unary_operator then
unary_exp calls itself recursively. But, if the token is not unary_operator, then it checks for the
postfix_exp.
*/
	unary_exp 		: unary_operator unary_exp
					| postfix_exp
					;
					
	unary_operator  : '~' | '&'
				    ;
				   
				   
/*
After checking for the primary expression and retrieving its sub tree, you can check for postfix operator. If there exists a postfix operator;
then it becomes the root of the subtree with primary expression as a child. 
*/

	postfix_exp : primary_exp postfix_operator
				| primary_exp 
				;
				
	postfix_operator : '++' | '--'
					 ;
					 
	primary_exp : id
				| constant
				| '(' assignment_exp ')'
				;
								
	constant 	: int_const
				| char_const
				| float_const
				| string
				;



  




